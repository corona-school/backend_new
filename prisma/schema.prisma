generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  email              String               @unique
  firstName          String
  lastName           String?
  active             Boolean              @default(false)
  notificationLevel  NotificationLevel    @default(all)
  phone              String?              @unique
  emailVerified      Boolean              @default(false)
  phoneVerified      Boolean              @default(false)
  Admin              Admin[]
  AuthenticationData AuthenticationData[]
  Notifications      EmailNotifications[]
  Pupil              Pupil[]
  TextNotifications  TextNotifications[]
  UserRoles          UserRoles[]
  Volunteer          Volunteer[]
}

model Pupil {
  id                String              @id @default(cuid())
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  PupilMatchRequest PupilMatchRequest[]
}

model Volunteer {
  id                    String                  @id @default(cuid())
  userId                String
  user                  User                    @relation(fields: [userId], references: [id])
  offers                Offer[]
  VolunteerMatchRequest VolunteerMatchRequest[]
}

model Admin {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model UserRoles {
  id        String   @id @default(cuid())
  createdOn DateTime @default(now())
  userId    String
  roleName  String
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, roleName])
}

model Offer {
  id                    String                  @id @default(cuid())
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now())
  volunteerId           String
  description           String
  volunteer             Volunteer               @relation(fields: [volunteerId], references: [id])
  VolunteerMatchRequest VolunteerMatchRequest[]
}

model AuthenticationData {
  id           String         @id @default(cuid())
  userId       String
  password     String
  user         User           @relation(fields: [userId], references: [id])
  refreshToken RefreshToken[]
}

model PupilMatchRequest {
  id             String           @id @default(cuid())
  requestor      String
  parameters     String[]
  user           Pupil            @relation(fields: [requestor], references: [id])
  RequestMatches RequestMatches[]
}

model RefreshToken {
  id                 String             @id @default(cuid())
  token              String
  valid              Boolean            @default(true)
  authId             String
  authenticationData AuthenticationData @relation(fields: [authId], references: [id])
}

model VolunteerMatchRequest {
  id             String           @id @default(cuid())
  requestor      String
  parameters     String[]
  offerId        String
  offer          Offer            @relation(fields: [offerId], references: [id])
  user           Volunteer        @relation(fields: [requestor], references: [id])
  RequestMatches RequestMatches[]
}

model RequestMatches {
  id             String                @id @default(cuid())
  pupilReqId     String
  volunteerReqId String
  pupilReq       PupilMatchRequest     @relation(fields: [pupilReqId], references: [id])
  volunteerReq   VolunteerMatchRequest @relation(fields: [volunteerReqId], references: [id])
}

model EmailNotifications {
  id             String               @id @default(cuid())
  sender         String
  recipientEmail String
  subject        String
  status         NotificationStatus   @default(pending)
  recipientName  String
  variables      String
  priority       NotificationPriority @default(low)
  template       String
  updatedAt      DateTime             @updatedAt
  recipient      User                 @relation(fields: [recipientEmail], references: [email])
}

model TextNotifications {
  id             String             @id @default(cuid())
  sender         String
  status         NotificationStatus @default(pending)
  recipientPhone String
  text           String
  updatedAt      DateTime           @updatedAt
  recipient      User               @relation(fields: [recipientPhone], references: [phone])
}

enum NotificationLevel {
  necessary
  all
}

enum NotificationStatus {
  sent
  error
  pending
}

enum NotificationPriority {
  high
  low
}
