// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String               @id @default(cuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  email              String               @unique
  emailVerified      Boolean              @default(false)
  phone              String?              @unique
  phoneVerified      Boolean              @default(false)
  active             Boolean              @default(false)
  firstName          String
  lastName           String?
  notificationLevel  NotificationLevel    @default(all)
  Pupil              Pupil[]
  Volunteer          Volunteer[]
  Notifications      EmailNotifications[]
  TextNotifications  TextNotifications[]
  AuthenticationData AuthenticationData[]
}

model Pupil {
  id                             String              @id @default(cuid())
  user                           User                @relation(fields: [userId], references: [id])
  userId                         String
  grade                          String
  PupilMatchRequest              CourseParticipantMatchRequest[]
  TuteeMatchRequests             TuteeMatchRequest[]
  PropjectCoacheeMatchRequests   ProjectCoacheeMatchRequest[]
}

model Volunteer {
  id                          String                  @id @default(cuid())
  createdAt                   DateTime                @default(now())
  updatedAt                   DateTime                @default(now())
  user                        User                    @relation(fields: [userId], references: [id])
  userId                      String
  isUniversityStudent         Boolean?
  state                       String?
  university                  String?
  internshipData              InternshipData?
  courseOffers                VolunteersOnCourses[]
  tutoringOffers              TutoringOffer[]
  projectCoachingOffers       ProjectCoachingOffer[]
  projectCoachingExpertData   ProjectCoachingExpert?
}

model CourseOffer {
  id                      String                  @id @default(cuid())
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @default(now())
  volunteers              VolunteersOnCourses[]
  title                   String
  description             String
  category                String
  tags                    String[]
  imageKey                String?
  times                   String
  participantContactEmail String?
  targetGroup             String
  instructorMatchRequests CourseInstructorMatchRequest[]
}

model VolunteersOnCourses {
  createdAt       DateTime    @default(now())
  volunteer       Volunteer   @relation(fields: [volunteerId], references: [id])
  volunteerId     String
  courseOffer     CourseOffer @relation(fields: [courseOfferId], references: [id])
  courseOfferId   String

  @@id([volunteerId, courseOfferId])
}

model TutoringOffer {
  id                    String                  @id @default(cuid())
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now())
  volunteer             Volunteer               @relation(fields: [volunteerId], references: [id])
  volunteerId           String
  languages             String[]
  supportsInDaz         Boolean?
  subjects              String
  tutorMatchRequests    TutorMatchRequest[]
}

model ProjectCoachingOffer {
  id                              String      @id @default(cuid())
  createdAt                       DateTime    @default(now())
  updatedAt                       DateTime    @default(now())
  volunteer                       Volunteer   @relation(fields: [volunteerId], references: [id])
  volunteerId                     String
  wasJufoParticipant              Boolean?
  hasJufoCertificate              Boolean?
  jufoPastParticipationInfo       String?
  jufoPastParticipationConfirmed  Boolean?
  projectCoachMatchRequests       ProjectCoachMatchRequest[]
}

model AuthenticationData {
  id           String         @id @default(cuid())
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  password     String
  refreshToken RefreshToken[]
}

model CourseParticipantMatchRequest {
  id             String           @id @default(cuid())
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now())
  validUnitil    DateTime?
  pupil          Pupil            @relation(fields: [pupilId], references: [id])
  pupilId        String
  parameters     String[]
  match          CourseMatch?
}

model RefreshToken {
  id                 String             @id @default(cuid())
  token              String
  valid              Boolean            @default(true)
  authenticationData AuthenticationData @relation(fields: [authId], references: [id])
  authId             String
}

model CourseInstructorMatchRequest {
  id             String           @id @default(cuid())
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now())
  validUnitil    DateTime?
  offer          CourseOffer      @relation(fields: [offerId], references: [id])
  offerId        String
  match          CourseMatch?
}

model TutorMatchRequest {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  validUntil    DateTime?
  offer         TutoringOffer   @relation(fields: [offerId], references: [id])
  offerId       String
  match         TutoringMatch?
}

model TuteeMatchRequest {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  tutee         Pupil           @relation(fields: [pupilId], references: [id])
  pupilId       String
  validUntil    DateTime?
  parameters    String
  match         TutoringMatch?
}

model TutoringMatch {
  id                    String              @id @default(cuid())
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @default(now())
  active                Boolean
  tutorMatchRequest     TutorMatchRequest   @relation(fields: [tutorMatchRequestId], references: [id])
  tutorMatchRequestId   String
  tuteeMatchRequest     TuteeMatchRequest   @relation(fields: [tuteeMatchRequestId], references: [id])
  tuteeMatchRequestId   String
}

model ProjectCoachMatchRequest {
  id            String                @id @default(cuid())
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @default(now())
  validUntil    DateTime?
  offer         ProjectCoachingOffer   @relation(fields: [offerId], references: [id])
  offerId       String
  match         ProjectCoachingMatch?
}

model ProjectCoacheeMatchRequest {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  tutee         Pupil           @relation(fields: [pupilId], references: [id])
  pupilId       String
  validUntil    DateTime?
  parameters    String
  match         ProjectCoachingMatch?
}

model ProjectCoachingMatch {
  id                          String                            @id @default(cuid())
  createdAt                   DateTime                          @default(now())
  updatedAt                   DateTime                          @default(now())
  active                      Boolean
  coachMatchRequest           ProjectCoachMatchRequest          @relation(fields: [coachMatchRequestId], references: [id])
  coachMatchRequestId         String
  coacheeMatchRequest         ProjectCoacheeMatchRequest        @relation(fields: [coacheeMatchRequestId], references: [id])
  coacheeMatchRequestId       String
}

model CourseMatch {
  id                          String                            @id @default(cuid())
  createdAt                   DateTime                          @default(now())
  updatedAt                   DateTime                          @default(now())
  active                      Boolean
  participantMatchRequest     CourseParticipantMatchRequest     @relation(fields: [participantMatchRequestId], references: [id])
  instructorMatchRequest      CourseInstructorMatchRequest      @relation(fields: [instructorMatchRequestId], references: [id])
  participantMatchRequestId   String
  instructorMatchRequestId    String
}

model ProjectCoachingExpert {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  volunteer     Volunteer   @relation(fields: [volunteerId], references: [id])
  volunteerId   String
  contactEmail  String
  description   String
  tags          String[]
  active        Boolean
  published     Boolean
}

model EmailNotifications {
  id             String               @id @default(cuid())
  template       String
  priority       NotificationPriority @default(low)
  sender         String
  recipient      User                 @relation(fields: [recipientEmail], references: [email])
  recipientEmail String
  recipientName  String
  subject        String
  variables      String
  status         NotificationStatus   @default(pending)
  updatedAt      DateTime             @updatedAt
}

model TextNotifications {
  id             String             @id @default(cuid())
  recipient      User               @relation(fields: [recipientPhone], references: [phone])
  recipientPhone String
  sender         String
  text           String
  status         NotificationStatus @default(pending)
  updatedAt      DateTime           @updatedAt
}

model InternshipData {
  id            String              @id @default(cuid())
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now())
  volunteer     Volunteer           @relation(fields: [volunteerId], references: [id])
  volunteerId   String
  module        InternshipModule
  moduleHours   Int
}

enum NotificationLevel {
  necessary
  all
}

enum NotificationStatus {
  sent
  error
  pending
}

enum NotificationPriority {
  high
  low
}

enum InternshipModule {
  Praktikum
  Seminar
}